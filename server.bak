/** 
 * Example of RESTful API using Express and NodeJS
 * @author Clark Jeria
 * @version 0.0.2
 */

/** BEGIN: Express Server Configuration */
var express = require('express');
var app = express();
var bodyParser = require('body-parser');
/**
 * get config
 */
var config = require('./config'); // get our config file

// use body parser so we can get info from POST and/or URL parameters
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

var port = process.env.PORT || 8080;
var mongoose = require('mongoose');
mongoose.connect(config.database); //connect to database
app.set('superSecret',config.secret); //secret variable
/** END: Express Server Configuration */

/** BEGIN: Express Routes Definition */
var router = require('./routes/router');
var cars = require('./routes/cars');
var drivers = require('./routes/drivers');
var passengers = require('./routes/passengers');
var paymentAccounts = require('./routes/paymentaccounts');
var rides = require('./routes/rides');
var sessions = require('./routes/sessions');

var User = require('./app/module/user');

app.use('/api', cars);
app.use('/api', drivers);
app.use('/api', passengers);
app.use('/api', paymentAccounts);
app.use('/api', rides);
app.use('/api', router);
app.use('/api', sessions);

// use morgan to log requests to the console
app.use(morgan('dev'));

app.use(function (req, res, next) {
  const testSecret = "linzhai";

  headers = JSON.stringify(req.headers);
  headers = JSON.parse(headers)
  console.log(headers);

  if (req.path != 'sessions') {
    if (headers.token != 'undefined') {
      res.status(404).json({ "errorCode": "1112", "errorMessage": "Missing token", "statusCode": "404" });
      return;
    } else {
      cryptedHash = base64.decode(header.token);
      decryptedHash = CryptoJS.AES.decrypt(cryptedHash, testSecret).toString(CryptoJS.enc.Utf8);

      try {
        recoveredUsername = decryptedHash.split(':')[0];
        recoveredExpiration = decryptedHash.split(':')[1];
        recoveredString = recoveredUsername+":"+recoveredExpiration;
        recoveredHashString = decryptedHash.split(':')[2];

        /**
         * veryfying token
         */
        if (recoveredHashString != CryptoJS.HmacSHA1(recoveredString,"APP")) {
           res.status(404).json({ "errorCode": "1113", "errorMessage": "Invalid token", "statusCode": "404" });
        }
      } catch (error) {
        res.status(404).json({ "errorCode": "1113", "errorMessage": "Invalid token", "statusCode": "404" });
        return;
      }
      /**
       * check if token is expired
       */
      if (recoveredExpiration < parseInt(Data.now()/1000)) {
        res.status(404).json({ "errorCode": "1114", "errorMessage": "expired token", "statusCode": "404" });
        return;
      } else {
        console.log("token verified!");
      }
    }
  }
  next();

});
/** END: Express Routes Definition */

/** BEGIN: Express Server Start */
app.listen(port);
console.log('Service running on port ' + port);

module.exports = app;
/** END: Express Server Start */